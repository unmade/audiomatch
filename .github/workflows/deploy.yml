name: Publish Python Package

on:
  push:
    tags:
      - '[0-2].[0-9]+.[0-9]+*'

jobs:

  pypi:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: Extract tag name
      id: tag_name
      run: |
        echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: "3.8"

    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Build Package
      run: |
        poetry build --format sdist

    - name: Unpack sdist to build wheels
      env:
        TAG: ${{ steps.tag_name.outputs.TAG }}
      run: |
        tar -xf dist/audiomatch-"${TAG}".tar.gz -C dist/
        mv dist/audiomatch-"${TAG}" dist/audiomatch

    - name: Build manylinux wheels
      uses: RalfG/python-wheels-manylinux-build@v0.2.2
      with:
        python-versions: "cp38-cp38"
        package-path: 'dist/audiomatch'

    - name: Copy wheel to dist
      run: |
        cp wheelhouse/*-manylinux*.whl dist/
        mv dist/audiomatch ./

    - name: Upload Package to PyPI
      env:
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        poetry publish -u $PYPI_USERNAME -p $PYPI_PASSWORD

    - name: Wait for PyPI to update indexes
      env:
        TAG: ${{ steps.tag_name.outputs.TAG }}
      run: |
        while ! pip install "audiomatch==${TAG}"; do
          sleep 2s
        done;

  dockerhub:
    needs: pypi

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: Extract tag name
      id: tag_name
      run: |
        echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

    - name: Build Docker image
      env:
        TAG: ${{ steps.tag_name.outputs.TAG }}
      run: |
        docker build . \
          -t fdooch/audiomatch:"${TAG}" \
          -t fdooch/audiomatch:latest \
          --build-arg package_version="${TAG}"

    - name: Log in to the Dockerhub registry
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

    - name: Push to Dockerhub
      run: |
        docker push fdooch/audiomatch
